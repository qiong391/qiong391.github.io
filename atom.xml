<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joeの博客</title>
  
  <subtitle>记录学习之路</subtitle>
  <link href="https://qiong391.github.io/atom.xml" rel="self"/>
  
  <link href="https://qiong391.github.io/"/>
  <updated>2024-06-27T13:09:07.041Z</updated>
  <id>https://qiong391.github.io/</id>
  
  <author>
    <name>Joe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>导出轨迹为kml文件（java和vue实现）</title>
    <link href="https://qiong391.github.io/2024/06/27/%E5%AF%BC%E5%87%BA%E8%BD%A8%E8%BF%B9%E4%B8%BAkml%E6%96%87%E4%BB%B6%EF%BC%88java%E5%92%8Cvue%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>https://qiong391.github.io/2024/06/27/%E5%AF%BC%E5%87%BA%E8%BD%A8%E8%BF%B9%E4%B8%BAkml%E6%96%87%E4%BB%B6%EF%BC%88java%E5%92%8Cvue%E5%AE%9E%E7%8E%B0%EF%BC%89/</id>
    <published>2024-06-27T13:07:11.135Z</published>
    <updated>2024-06-27T13:09:07.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>KML</code>文件是一种存储点数据<code>xml</code>文件格式，可以在地理信息系统中展示地理数据，本文实现了<code>Java</code>生成KML文件以及前端浏览器下载文件。</p><span id="more"></span><h3 id="KML文件结构"><a href="#KML文件结构" class="headerlink" title="KML文件结构"></a>KML文件结构</h3><p>KML文件是一个XML文档，包含了用于描述地理信息的标记和元素，可用于定义的地理特征包括地点、描述、叠层、路径和多边形等。</p><p>轨迹KML文件基本结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.opengis.net/kml/2.2&quot;</span> <span class="attr">xmlns:gx</span>=<span class="string">&quot;http://www.google.com/kml/ext/2.2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Document</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>track name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Placemark</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LineString</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">coordinates</span>&gt;</span>lon,lat lon,lat<span class="tag">&lt;/<span class="name">coordinates</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LineString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Placemark</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">kml</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用JAK库生成KML文件"><a href="#使用JAK库生成KML文件" class="headerlink" title="使用JAK库生成KML文件"></a>使用JAK库生成KML文件</h3><p>Java中有多种方式创建KML，这里使用的是<code>JavaAPIforKml</code>库创建和操作KML文件。</p><p>首先在pom.xml文件中引入添加JavaAPIforKml依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.micromata.jak<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaAPIforKml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> de.micromata.opengis.kml.v_2_2_0.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;InputStreamResource&gt; <span class="title function_">exportTrack</span><span class="params">(String trackLine)</span>&#123;</span><br><span class="line">        <span class="comment">//解析json字符串</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">trackData</span> <span class="operator">=</span> JSONObject.parseObject(trackLine);</span><br><span class="line">        <span class="comment">// 坐标数组</span></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">coordinatesArr</span> <span class="operator">=</span> trackData.getJSONArray(<span class="string">&quot;coordinates&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个kml对象</span></span><br><span class="line">        <span class="type">Kml</span> <span class="variable">kml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kml</span>();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> kml.createAndSetDocument().withName(<span class="string">&quot;Track&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Coordinate&gt; coordinates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coordinatesArr.size(); i++) &#123;</span><br><span class="line">            <span class="type">JSONArray</span> <span class="variable">coordinate</span> <span class="operator">=</span> coordinatesArr.getJSONArray(i);</span><br><span class="line">            <span class="type">double</span> <span class="variable">longitude</span> <span class="operator">=</span> coordinate.getDoubleValue(<span class="number">0</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">latitude</span> <span class="operator">=</span> coordinate.getDoubleValue(<span class="number">1</span>);</span><br><span class="line">            coordinates.add(<span class="keyword">new</span> <span class="title class_">Coordinate</span>(longitude, latitude));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线数据，并将 LineString 添加到 Placemark 中</span></span><br><span class="line">        <span class="type">LineString</span> <span class="variable">lineString</span> <span class="operator">=</span>document.createAndAddPlacemark().createAndSetLineString();</span><br><span class="line">        lineString.setCoordinates(coordinates);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成KML文件</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        kml.marshal(out);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        <span class="type">byte</span>[] kmlBytes = out.toByteArray();</span><br><span class="line">        <span class="type">InputStreamResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamResource</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(kmlBytes));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .contentLength(kmlBytes.length)</span><br><span class="line">                .contentType(MediaType.APPLICATION_OCTET_STREAM)</span><br><span class="line">                .body(resource);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="前端下载KML文件"><a href="#前端下载KML文件" class="headerlink" title="前端下载KML文件"></a>前端下载KML文件</h3><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">downloadTask</span>(<span class="params">url, params, filename, config</span>) &#123;</span><br><span class="line">  <span class="comment">// 发送Post请求，blob类型数据</span></span><br><span class="line">  <span class="keyword">return</span> service.<span class="title function_">post</span>(url, params, &#123;</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;blob&quot;</span>, <span class="comment">// 设置响应类型为arraybuffer</span></span><br><span class="line">    ...config</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> (data) =&gt; &#123;</span><br><span class="line"><span class="comment">// 验证是否为blob格式</span></span><br><span class="line">    <span class="keyword">const</span> isBlob = <span class="title function_">blobValidate</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (isBlob) &#123;</span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data])</span><br><span class="line">      <span class="title function_">saveAs</span>(blob, filename)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> resText = <span class="keyword">await</span> data.<span class="title function_">text</span>();</span><br><span class="line">      <span class="keyword">const</span> rspObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(resText);</span><br><span class="line">      <span class="keyword">const</span> errMsg = errorCode[rspObj.<span class="property">code</span>] || rspObj.<span class="property">msg</span> || errorCode[<span class="string">&#x27;default&#x27;</span>]</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载文件错误！&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了JAK库，还有其它一些Java工具可以用来导出KML文件，如GIS中常用的GeoTools库。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;KML&lt;/code&gt;文件是一种存储点数据&lt;code&gt;xml&lt;/code&gt;文件格式，可以在地理信息系统中展示地理数据，本文实现了&lt;code&gt;Java&lt;/code&gt;生成KML文件以及前端浏览器下载文件。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="https://qiong391.github.io/categories/Note/"/>
    
    
    <category term="KML" scheme="https://qiong391.github.io/tags/KML/"/>
    
    <category term="Java" scheme="https://qiong391.github.io/tags/Java/"/>
    
    <category term="Blob" scheme="https://qiong391.github.io/tags/Blob/"/>
    
  </entry>
  
  <entry>
    <title>postgresql中坐标转换（GCJ-02 to WGS84）</title>
    <link href="https://qiong391.github.io/2024/06/27/Postgresql%E4%B8%AD%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2%EF%BC%88GCJ-02toWGS84%EF%BC%89/"/>
    <id>https://qiong391.github.io/2024/06/27/Postgresql%E4%B8%AD%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2%EF%BC%88GCJ-02toWGS84%EF%BC%89/</id>
    <published>2024-06-27T11:52:44.952Z</published>
    <updated>2024-06-27T12:05:27.038Z</updated>
    
    <content type="html"><![CDATA[<p><code>PostgreSQL</code> 默认情况下没有提供直接将高德坐标（GCJ-02）转换为 WGS84 坐标的函数。在 PostGIS 扩展中，没有直接支持高德坐标转换的函数。要在 PostgreSQL 中实现高德坐标到 WGS84 坐标的转换，需要使用外部库或者自定义函数。这里通过 PostgreSQL 中的 <code>plpgsql </code>扩展编写存储过程和函数实现坐标转换。</p><span id="more"></span><h2 id="安装plpgsql扩展"><a href="#安装plpgsql扩展" class="headerlink" title="安装plpgsql扩展"></a>安装plpgsql扩展</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION plpgsql;</span><br></pre></td></tr></table></figure><h2 id="创建自定义函数"><a href="#创建自定义函数" class="headerlink" title="创建自定义函数"></a>创建自定义函数</h2><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>函数参数为高德坐标的纬度 lat 和经度 lon，返回转换后的 WGS84 坐标的纬度 wgs84_lat 和经度 wgs84_lon。</p><p>其中，先判断输入坐标是否在中国范围内（通过 <code>out_of_china</code> 变量），如果在中国范围外则直接返回原始坐标，否则进行坐标转换的计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> gcj02towgs84(lat float8, lon float8)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">TABLE</span> (wgs84_lat float8, wgs84_lon float8) <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    pi float8 :<span class="operator">=</span> <span class="number">3.1415926535897932384626</span>;</span><br><span class="line">    ee float8 :<span class="operator">=</span> <span class="number">0.00669342162296594323</span>;</span><br><span class="line">    a float8 :<span class="operator">=</span> <span class="number">6378245.0</span>;</span><br><span class="line">    out_of_china <span class="type">BOOLEAN</span>;</span><br><span class="line">    dLat float8;</span><br><span class="line">    dLon float8;</span><br><span class="line">    radLat float8;</span><br><span class="line">    magic float8;</span><br><span class="line">    sqrtMagic float8;</span><br><span class="line">    mgLat float8;</span><br><span class="line">    mgLon float8;</span><br><span class="line">    lontitude float8;</span><br><span class="line">    latitude float8;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    out_of_china :<span class="operator">=</span> (lat <span class="operator">&lt;</span> <span class="number">0.8293</span> <span class="keyword">OR</span> lat <span class="operator">&gt;</span> <span class="number">55.8271</span> <span class="keyword">OR</span> lon <span class="operator">&lt;</span> <span class="number">72.004</span> <span class="keyword">OR</span> lon <span class="operator">&gt;</span> <span class="number">137.8347</span>);</span><br><span class="line">    </span><br><span class="line">    IF out_of_china <span class="keyword">THEN</span></span><br><span class="line">        wgs84_lat :<span class="operator">=</span> lat;</span><br><span class="line">        wgs84_lon :<span class="operator">=</span> lon;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        dLat :<span class="operator">=</span> transformLat(lon <span class="operator">-</span> <span class="number">105.0</span>, lat <span class="operator">-</span> <span class="number">35.0</span>);</span><br><span class="line">        dLon :<span class="operator">=</span> transformLon(lon <span class="operator">-</span> <span class="number">105.0</span>, lat <span class="operator">-</span> <span class="number">35.0</span>);</span><br><span class="line">        radLat :<span class="operator">=</span> lat <span class="operator">/</span> <span class="number">180.0</span> <span class="operator">*</span> pi;</span><br><span class="line">        magic :<span class="operator">=</span> <span class="built_in">sin</span>(radLat);</span><br><span class="line">        magic :<span class="operator">=</span> <span class="number">1</span> <span class="operator">-</span> ee <span class="operator">*</span> magic <span class="operator">*</span> magic;</span><br><span class="line">        sqrtMagic :<span class="operator">=</span> <span class="built_in">sqrt</span>(magic);</span><br><span class="line">        dLat :<span class="operator">=</span> (dLat <span class="operator">*</span> <span class="number">180.0</span>) <span class="operator">/</span> ((a <span class="operator">*</span> (<span class="number">1</span> <span class="operator">-</span> ee)) <span class="operator">/</span> (magic <span class="operator">*</span> sqrtMagic) <span class="operator">*</span> pi);</span><br><span class="line">        dLon :<span class="operator">=</span> (dLon <span class="operator">*</span> <span class="number">180.0</span>) <span class="operator">/</span> (a <span class="operator">/</span> sqrtMagic <span class="operator">*</span> <span class="built_in">cos</span>(radLat) <span class="operator">*</span> pi);</span><br><span class="line">        mgLat :<span class="operator">=</span> lat <span class="operator">+</span> dLat;</span><br><span class="line">        mgLon :<span class="operator">=</span> lon <span class="operator">+</span> dLon;</span><br><span class="line">        lontitude :<span class="operator">=</span> lon <span class="operator">*</span> <span class="number">2</span> <span class="operator">-</span> mgLon;</span><br><span class="line">        latitude :<span class="operator">=</span> lat <span class="operator">*</span> <span class="number">2</span> <span class="operator">-</span> mgLat;</span><br><span class="line">        </span><br><span class="line">        wgs84_lat :<span class="operator">=</span> latitude;</span><br><span class="line">        wgs84_lon :<span class="operator">=</span> lontitude;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">RETURN</span> NEXT;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>一些解释：</p><ul><li><code>$$</code>：表示函数体开始的标记。</li><li><code>RETURNS TABLE</code> ：指定了返回结果的列，并且将结果集作为表返回，包含了 <code>wgs84_lat</code> 和 <code>wgs84_lon</code> 两列。</li><li><code>LANGUAGE plpgsql</code>：指定函数使用的语言为 PL&#x2F;pgSQL，这是 PostgreSQL 的过程化 SQL 语言，支持编写存储过程和函数。</li></ul><h3 id="经纬度的转换"><a href="#经纬度的转换" class="headerlink" title="经纬度的转换"></a>经纬度的转换</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--将经度 x 和纬度 y 转换为新的纬度坐标，用于gcj02towgs84函数中的计算</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> transformLat(x float8, y float8)</span><br><span class="line"><span class="keyword">RETURNS</span> float8 <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    ret float8;</span><br><span class="line">   pi float8 :<span class="operator">=</span> <span class="number">3.1415926535897932384626</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    ret :<span class="operator">=</span> <span class="number">-100.0</span> <span class="operator">+</span> <span class="number">2.0</span> <span class="operator">*</span> x <span class="operator">+</span> <span class="number">3.0</span> <span class="operator">*</span> y <span class="operator">+</span> <span class="number">0.2</span> <span class="operator">*</span> y <span class="operator">*</span> y <span class="operator">+</span> <span class="number">0.1</span> <span class="operator">*</span> x <span class="operator">*</span> y <span class="operator">+</span> <span class="number">0.2</span> <span class="operator">*</span> <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(x));</span><br><span class="line">    ret :<span class="operator">=</span> ret <span class="operator">+</span> (<span class="number">20.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(<span class="number">6.0</span> <span class="operator">*</span> x <span class="operator">*</span> pi) <span class="operator">+</span> <span class="number">20.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(<span class="number">2.0</span> <span class="operator">*</span> x <span class="operator">*</span> pi)) <span class="operator">*</span> <span class="number">2.0</span> <span class="operator">/</span> <span class="number">3.0</span>;</span><br><span class="line">    ret :<span class="operator">=</span> ret <span class="operator">+</span> (<span class="number">20.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(y <span class="operator">*</span> pi) <span class="operator">+</span> <span class="number">40.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(y <span class="operator">/</span> <span class="number">3.0</span> <span class="operator">*</span> pi)) <span class="operator">*</span> <span class="number">2.0</span> <span class="operator">/</span> <span class="number">3.0</span>;</span><br><span class="line">    ret :<span class="operator">=</span> ret <span class="operator">+</span> (<span class="number">160.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(y <span class="operator">/</span> <span class="number">12.0</span> <span class="operator">*</span> pi) <span class="operator">+</span> <span class="number">320</span> <span class="operator">*</span> <span class="built_in">sin</span>(y <span class="operator">*</span> pi <span class="operator">/</span> <span class="number">30.0</span>)) <span class="operator">*</span> <span class="number">2.0</span> <span class="operator">/</span> <span class="number">3.0</span>;</span><br><span class="line">    <span class="keyword">RETURN</span> ret;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--将经度 x 和纬度 y 转换为新的经度坐标，用于gcj02towgs84函数中的计算</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> transformLon(x float8, y float8)</span><br><span class="line"><span class="keyword">RETURNS</span> float8 <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    ret float8;</span><br><span class="line">   pi float8 :<span class="operator">=</span> <span class="number">3.1415926535897932384626</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    ret :<span class="operator">=</span> <span class="number">300.0</span> <span class="operator">+</span> x <span class="operator">+</span> <span class="number">2.0</span> <span class="operator">*</span> y <span class="operator">+</span> <span class="number">0.1</span> <span class="operator">*</span> x <span class="operator">*</span> x <span class="operator">+</span> <span class="number">0.1</span> <span class="operator">*</span> x <span class="operator">*</span> y <span class="operator">+</span> <span class="number">0.1</span> <span class="operator">*</span> <span class="built_in">sqrt</span>(<span class="built_in">abs</span>(x));</span><br><span class="line">    ret :<span class="operator">=</span> ret <span class="operator">+</span> (<span class="number">20.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(<span class="number">6.0</span> <span class="operator">*</span> x <span class="operator">*</span> pi) <span class="operator">+</span> <span class="number">20.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(<span class="number">2.0</span> <span class="operator">*</span> x <span class="operator">*</span> pi)) <span class="operator">*</span> <span class="number">2.0</span> <span class="operator">/</span> <span class="number">3.0</span>;</span><br><span class="line">    ret :<span class="operator">=</span> ret <span class="operator">+</span> (<span class="number">20.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(x <span class="operator">*</span> pi) <span class="operator">+</span> <span class="number">40.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(x <span class="operator">/</span> <span class="number">3.0</span> <span class="operator">*</span> pi)) <span class="operator">*</span> <span class="number">2.0</span> <span class="operator">/</span> <span class="number">3.0</span>;</span><br><span class="line">    ret :<span class="operator">=</span> ret <span class="operator">+</span> (<span class="number">150.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(x <span class="operator">/</span> <span class="number">12.0</span> <span class="operator">*</span> pi) <span class="operator">+</span> <span class="number">300.0</span> <span class="operator">*</span> <span class="built_in">sin</span>(x <span class="operator">/</span> <span class="number">30.0</span> <span class="operator">*</span> pi)) <span class="operator">*</span> <span class="number">2.0</span> <span class="operator">/</span> <span class="number">3.0</span>;</span><br><span class="line">    <span class="keyword">RETURN</span> ret;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><p>使用自定义的存储过程<code>gcj02towgs84</code>转换高德坐标如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--更新表单的 wgs84 坐标</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span> t</span><br><span class="line"><span class="keyword">SET</span> wgs84lat_cur <span class="operator">=</span> (<span class="keyword">SELECT</span> (gcj02towgs84(t.gps_lat, t.gps_long)).wgs84_lat),</span><br><span class="line">    wgs84lng_cur <span class="operator">=</span> (<span class="keyword">SELECT</span> (gcj02towgs84(t.gps_lat, t.gps_long)).wgs84_lon),</span><br><span class="line">    wgs84lat_data <span class="operator">=</span> (<span class="keyword">SELECT</span> (gcj02towgs84(t.data_gps_lat, t.data_gps_long)).wgs84_lat),</span><br><span class="line">    wgs84lng_data <span class="operator">=</span> (<span class="keyword">SELECT</span> (gcj02towgs84(t.data_gps_lat, t.data_gps_long)).wgs84_lon)</span><br></pre></td></tr></table></figure><p>至此，高德坐标（GCJ-02）到 WGS84 坐标转换完成。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;PostgreSQL&lt;/code&gt; 默认情况下没有提供直接将高德坐标（GCJ-02）转换为 WGS84 坐标的函数。在 PostGIS 扩展中，没有直接支持高德坐标转换的函数。要在 PostgreSQL 中实现高德坐标到 WGS84 坐标的转换，需要使用外部库或者自定义函数。这里通过 PostgreSQL 中的 &lt;code&gt;plpgsql &lt;/code&gt;扩展编写存储过程和函数实现坐标转换。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="https://qiong391.github.io/categories/Note/"/>
    
    
    <category term="GCJ-02" scheme="https://qiong391.github.io/tags/GCJ-02/"/>
    
    <category term="postgresql" scheme="https://qiong391.github.io/tags/postgresql/"/>
    
    <category term="GIS" scheme="https://qiong391.github.io/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>地图切片</title>
    <link href="https://qiong391.github.io/2024/04/30/mapTile/"/>
    <id>https://qiong391.github.io/2024/04/30/mapTile/</id>
    <published>2024-04-30T06:24:50.000Z</published>
    <updated>2024-06-27T13:16:12.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>瓦片数据是将矢量或影像数据进行预处理，采用高效的缓存机制（如金字塔）形成的缓存图片集，采用“级、行、列”方式进行组织，可在网页中快速加载。因此，瓦片地图加载是根据客户端请求的地图范围和级别，通过计算行列号获取对应级别下网格的瓦片（即服务器预裁剪的图片），由这些瓦片集在客户端形成一张地图。</p><span id="more"></span><p><img src="/2024/04/30/mapTile/imagePyramid.png" alt="imagePyramid"></p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念<img src="/2024/04/30/mapTile/urz6lpwzvk.png" alt="切片概念"></h2><h3 id="切片方案原点-Tile-scheme-origin"><a href="#切片方案原点-Tile-scheme-origin" class="headerlink" title="切片方案原点(Tile scheme origin)"></a>切片方案原点(Tile scheme origin)</h3><p>采用源数据集空间参考的坐标值，一般切片方案原点取左上角（例如：谷歌切片方案的原点是<code>[-20037508.34,20037508.34]</code>），但是有些切片方案原点确实左下角（例如：TMS切片方案原点是<code>[-20037508.34,-20037508.34]</code>）。源数据集的范围必须在此原点范围内（但不必与原点重合）。</p><h3 id="切片大小（Tile-Size：width，height）"><a href="#切片大小（Tile-Size：width，height）" class="headerlink" title="切片大小（Tile Size：width，height）"></a>切片大小（Tile Size：width，height）</h3><p>缓存切片的宽度和高度（以像素为单位）。默认设置为 256x256。为在性能和可管理性之间寻求最佳平衡，应避免偏离宽度值 256 或 512。</p><h3 id="dpi"><a href="#dpi" class="headerlink" title="dpi"></a>dpi</h3><p>专用输出设备的每英寸点数。如果所选择的 DPI 与输出设备（通常是显示器）的分辨率不匹配，则切片将显示错误比例。默认值为 96。</p><h3 id="分辨率组"><a href="#分辨率组" class="headerlink" title="分辨率组"></a>分辨率组</h3><p>这个是在做切片的时候非常重要的一个参数，在前面一片文章里面已经说过了。</p><h3 id="切片范围"><a href="#切片范围" class="headerlink" title="切片范围"></a>切片范围</h3><p>切片范围不是地图范围，是切片方案下的做切片的范围。例如，谷歌的切片范围是：<code>[-20037508.34,-20037508.34,20037508.34,20037508.34]</code>。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>GIS的底图一直使用金字塔技术进行切图，使用户能够快速访问指定级别的地图或者影像。但是切图本身是一张图片，无法进行交互。于是又引入了矢量图层用来显示矢量点线面，这通常需要先获取矢量地理数据（例如GeoJson），然后通过前端将其绘制成不同元素便能通过鼠标进行响应交互了。</p><h2 id="切片处理"><a href="#切片处理" class="headerlink" title="切片处理"></a>切片处理</h2><p>根据zoom获取显示范围内tiles（x、y、z）、对应位置获取并加载对应xyz的瓦片</p><h2 id="切片调试代码"><a href="#切片调试代码" class="headerlink" title="切片调试代码"></a>切片调试代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">loadTiles</span>(<span class="params">zoom</span>)&#123;</span><br><span class="line">     <span class="comment">// 根据缩放级别和当前地图范围计算瓦片范围</span></span><br><span class="line">     <span class="keyword">const</span> mapExtent = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getView</span>().<span class="title function_">calculateExtent</span>();</span><br><span class="line">     <span class="keyword">const</span> tileLayer = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getLayers</span>().<span class="title function_">item</span>(<span class="number">0</span>); <span class="comment">// 获取第一个图层</span></span><br><span class="line">     <span class="keyword">const</span> tileSource = tileLayer.<span class="title function_">getSource</span>(); <span class="comment">// 获取图层的源</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> tileGrid = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getLayers</span>().<span class="title function_">item</span>(<span class="number">0</span>).<span class="title function_">getSource</span>().<span class="title function_">getTileGrid</span>();</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">const</span> mapExtent_3857 = [<span class="title function_">fromLonLat</span>([mapExtent[<span class="number">0</span>],mapExtent[<span class="number">1</span>]])[<span class="number">0</span>],</span><br><span class="line">       <span class="title function_">fromLonLat</span>([mapExtent[<span class="number">0</span>],mapExtent[<span class="number">1</span>]])[<span class="number">1</span>],</span><br><span class="line">       <span class="title function_">fromLonLat</span>([mapExtent[<span class="number">2</span>],mapExtent[<span class="number">3</span>]])[<span class="number">0</span>],</span><br><span class="line">       <span class="title function_">fromLonLat</span>([mapExtent[<span class="number">2</span>],mapExtent[<span class="number">3</span>]])[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 计算当前地图范围内的瓦片行列号</span></span><br><span class="line">     tileGrid.<span class="title function_">forEachTileCoord</span>(mapExtent_3857, <span class="title class_">Math</span>.<span class="title function_">round</span>(zoom), <span class="function">(<span class="params">tileCoord</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(tileCoord)</span><br><span class="line">       <span class="comment">// 加载对应的瓦片</span></span><br><span class="line">       <span class="keyword">const</span> tileUrl = tileSource.<span class="title function_">getTileUrlFunction</span>()(tileCoord);</span><br><span class="line">       <span class="comment">// console.log(&#x27;Tile URL:&#x27;, tileUrl)</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:3000/tile/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;&#x27;</span></span><br><span class="line"><span class="comment">// TileDebug</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">addLayer</span>(<span class="keyword">new</span> <span class="title class_">TileLayer</span>(&#123;</span><br><span class="line">       <span class="attr">source</span>: <span class="keyword">new</span> <span class="title class_">TileDebug</span>(&#123;</span><br><span class="line">         <span class="attr">projection</span>: <span class="string">&#x27;EPSG:3857&#x27;</span>,            <span class="comment">// Web墨卡托投影坐标系</span></span><br><span class="line">         <span class="attr">tileGrid</span>: <span class="variable language_">this</span>.<span class="property">tdLayervec</span>.<span class="title function_">getSource</span>().<span class="title function_">getTileGrid</span>()   <span class="comment">// 获取地图的瓦片坐标系</span></span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;瓦片数据是将矢量或影像数据进行预处理，采用高效的缓存机制（如金字塔）形成的缓存图片集，采用“级、行、列”方式进行组织，可在网页中快速加载。因此，瓦片地图加载是根据客户端请求的地图范围和级别，通过计算行列号获取对应级别下网格的瓦片（即服务器预裁剪的图片），由这些瓦片集在客户端形成一张地图。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="https://qiong391.github.io/categories/Note/"/>
    
    
    <category term="GIS" scheme="https://qiong391.github.io/tags/GIS/"/>
    
    <category term="Tile" scheme="https://qiong391.github.io/tags/Tile/"/>
    
  </entry>
  
</feed>
